<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:View="View.*" xmlns:local="*" xmlns:maps="com.google.maps.*" >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<mx:SolidColorStroke id="DateAxisStroke" color="0x000000"
							 weight="8" alpha=".75" caps="none" />		
		<fx:XML id="mydata" source="../xml/sample.xml" />
	
		<mx:SolidColorStroke id="scrollerStroke" weight="8" color="0x000000" alpha="0.6" caps="round" />
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.google.maps.InfoWindowOptions;
			import com.google.maps.LatLng;
			import com.google.maps.LatLngBounds;
			import com.google.maps.Map;
			import com.google.maps.MapEvent;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.MapType;
			import com.google.maps.controls.MapTypeControl;
			import com.google.maps.controls.PositionControl;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.interfaces.IPane;
			import com.google.maps.overlays.Marker;
			import com.google.maps.services.*;
			
			import flash.geom.ColorTransform;
			
			import flashx.textLayout.events.DamageEvent;
			
			import mx.charts.events.ChartItemEvent;
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.xml.SimpleXMLDecoder;
			import mx.utils.ArrayUtil;
		
			
			//web service to get location information from IP Address
			private const hostIpUrl:String = "http://api.hostip.info/get_html.php";
			private const reTryDelay:uint = 1000;
			private const reTryLimit:uint = 3;
			
			[Bindable]private var _clientIpAddr:String = "";
			[Bindable]private var _currentLat:String = "";
			[Bindable]private var _currentLng:String = "";
			
			private var _markers:Array;
			
			
			private function findLocation(ip:String):void
			{
				
				
				var xml:XML = XML(ip);
				
				var def:Namespace = new Namespace("http://www.hostip.info/api");
				var gml:Namespace = new Namespace("http://www.opengis.net/gml");
				
				
				
				// handling namespace of xml
				var featureMember:XML = xml.gml::featureMember[0];
				var hostip:XML = featureMember.def::Hostip[0];
				var locationName:String = hostip.gml::name[0].toString();
				var country:String = hostip.def::countryAbbrev[0].toString();
				if(country == "XX")
				{
					Alert.show("It couldn't find the location for ip address : " + ip + ".","Information");
					if(!_currentLat.length || _currentLat == "0")
					{
						// set default location to Tokyo
						_currentLat = "35.69299463209883";
						_currentLng = "139.70626831054688";
						//moveGMapLocation(Number(_currentLat), Number(_currentLng));
					}
					return;
				}
				
				var ipLocation:XML = featureMember.def::Hostip.def::ipLocation[0];
				var pointProperty:XML = ipLocation.gml::PointProperty[0];
				var point:XML = pointProperty.gml::Point[0];
				var coordinates:String = point.gml::coordinates.toString();
				
				/*
				if(e.token.hasOwnProperty("isClientIp") && e.token.isClientIp)
				{
					_clientCountry = country;
				}*/
				
				var ll:Array = coordinates.split(",");
				_currentLat = ll[1];
				_currentLng = ll[0];
				
				var title:String = "The location of " + ip;
				var content:String = locationName + ", " + country + "\n " +
					"Latitude : " + _currentLat + "\n" +
					"Longitude : " + _currentLng;
				
				moveGMapLocation(Number(_currentLat), Number(_currentLng));
				
				addLocationMarker(title, content, Number(_currentLat), Number(_currentLng));
			
			}
			
			private function moveGMapLocation(lat:Number, lng:Number):void
			{
				if(!gmap.isLoaded())
				{
					return;
				}
				
				var latLng:LatLng = new LatLng(lat, lng);
				gmap.setCenter(latLng);
			}
			
			
			private function getLatLngFromIpAddr(ip:String, isClientIp:Boolean = false):void
			{
				if(!ip.length)
				{
					return;
				}
				
				//for debug
				if(ip == "127.0.0.1")
				{
					//local host
					_clientIpAddr = "198.82.2.198";
					ip = _clientIpAddr;
				}
				
				findLocation(ip);
			}
			
			
			
			
			private function onMapReady(event:Event):void {
				
				//TODO: find a way to automatically know client location
				gmap.setCenter(new LatLng(Number("39.1915"
					), Number("-77.3238")), 13, MapType.NORMAL_MAP_TYPE);
				gmap.addControl(new ZoomControl());
				gmap.addControl(new PositionControl());
				gmap.addControl(new MapTypeControl());
				gmap.openInfoWindow(gmap.getCenter(), new InfoWindowOptions({title:"Your Location"}));
				
				/* Add 5 markers to the map at random locations
				var bounds:LatLngBounds = map.getLatLngBounds();
				var southWest:LatLng = bounds.getSouthWest();
				var northEast:LatLng = bounds.getNorthEast();
				var lngSpan:Number = northEast.lng() - southWest.lng();
				var latSpan:Number = northEast.lat() - southWest.lat();
				for (var i:Number = 0; i < 5; i++) {
					var latlng:LatLng = new LatLng(southWest.lat() + latSpan * Math.random(),
						southWest.lng() + lngSpan * Math.random());
					map.addOverlay(createMarker(latlng, i + 1));
				}*/
			}
			
			private function addLocationMarker(title:String, content:String, lat:Number, lng:Number):void
			{
				var latLng:LatLng = new LatLng(lat, lng);
				var marker:Marker = new Marker(latLng);
				var titleFormat:TextFormat = new TextFormat();
				titleFormat.bold = true;
				titleFormat.color = 0x267BE3;
				titleFormat.size = 14;
				
				var infoArgs:Object = new Object();
				infoArgs.title = title;
				infoArgs.titleFormat = titleFormat;
				infoArgs.content = content;
				infoArgs.pointOffset = new Point(-20, -20);
				infoArgs.cornerRadius = 10;
				infoArgs.hasShadow = false;
				var info:InfoWindowOptions = new InfoWindowOptions(infoArgs);
				marker.addEventListener(MapMouseEvent.CLICK,
					function(e:MapMouseEvent):void
					{
						gmap.openInfoWindow(latLng, info);
					}
				);
				gmap.openInfoWindow(latLng, info);
				gmap.addOverlay(marker);
				
				
				//save all the markers has showed in the gmap
				_markers.push(marker);
			}
			
			private function clearMarkers():void
			{
				for each(var marker:Marker in _markers)
				{
					gmap.removeOverlay(marker);
				}
				
				gmap.closeInfoWindow();
			}
			
			/*
			[Bindable]private var mygraphAC:ArrayCollection = new ArrayCollection([
				{ type: "KB", date:"2010-4-12 21:1:47.761",data: "www.google.com", tl:"BASE"},
				{ type: "URL", date:"2010-04-12 21:03:52.116647",domain: "google.com", tl:"BASE", ip:"66.249.81.104", URL:"www.google.com"},
				{ type: "URL", date:"2010-04-12 21:03:52.265255",domain: "google.com", tl:"BASE", ip:"66.249.81.104", URL:"www.google.com"},
				{ type: "KB", date:"2010-4-12 21:4:24.462",data: "www.", tl:"BASE"},
				{ type: "KB", date:"2010-4-12 21:4:25.321",data: "google.", tl:"BASE"},
				{ type: "URL", date:"2010-04-12 21:04:25.2331",domain: "google.com", tl:"BASE",ip:"66.249.81.104", URL:"www.google.com"},
				{ type: "KB", date:"2010-4-12 21:4:26.9",data: "com", tl:"BASE"},
				{ type: "URL", date:"2010-04-12 21:04:26.216489",domain: "google.com", tl:"BASE",ip:"74.125.93.138", URL:"clients1.google.com"},
				{ type: "URL", date:"2010-04-12 21:04:26.322577",domain: "google.com", tl:"BASE",ip:"66.249.81.104", URL:"www.google.com"},
				{ type: "KB", date:"2010-4-12 21:1:48.627",data: "googledot", tl:"BASE"},
				{ type: "KB", date:"2010-4-12 21:1:49.296",data: "com", tl:"BASE"},
				{ type: "KB", date:"2010-4-12 21:1:53.934",data: "www.", tl:"BASE"},
				{ type: "MC", date:"2010-4-12 21:7:8.551",domain: "vt.edu", tl:"BASE", URL:"webmail.cs.vt.edu"}]);
			 
			 //Dynamically generate this in future 
			//private var XML_PATH:String = "../xml/sample.xml";
			//[Bindable]private var mydata:ArrayCollection;
			//[Bindable]private var mygraphAC:ArrayCollection;
			[Bindable]private var xcategoryAC:ArrayCollection = new ArrayCollection([{type:"MC"}, {type:"KB"}, {type:"BASE"}, {type:"URL"} ]);
			private function resultHandler(event:ResultEvent):void
			{
				mydata = event.result.list.item as ArrayCollection;
			}*/
			
			[Bindable]private var xcategoryAC:ArrayCollection = new ArrayCollection([{type:"MC"}, {type:"KB"}, {type:"BASE"}, {type:"URL"} ]);
			
			public function parseDate(s:String):Date{
			   //Get an array of Strings from the dash-seperated String
				var a:Array = s.split(" ");
				trace(s);
				var d:Array = a[0].split("-");
				var t:Array = a[1].split(":")
				var b:Array = a[1].split(".");
				//var t:Array = b[0].split(":");
				//Create the new Date Object, Subtract one from the month property
				var newDate:Date = new Date(d[0], d[1]-1, d[2], t[0], t[1], t[2], b[1]);
				//var newDate:String = a[1].toString();
				//var newDate:Date = new Date(d[0], d[1]-1, d[2]);
				return newDate;
			}
			
			
			protected function itemDataClick(event:MouseEvent):void
			{
				// TODO send data to a specified server
				
				Alert.show("Data Click");
			}

			
			


			protected function ldata_focusInHandler(event:FocusEvent):void
			{
				// Add the Marker
				Alert.show("Focus In");
				
			}


			protected function ldata_focusOutHandler(event:FocusEvent):void
			{
				// Remove all the marker
				Alert.show("Focus Out");
			}

		]]>
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up"/>
		<s:State name="over"/>
		<s:State name="down" basedOn="over"/>
	</s:states>
	
	<!-- skinClass="MyPanelSkins" -->
	<s:VGroup width="100%" height="100%">
		<s:Panel id="myPanel" width="100%" height="50%" skinClass="MyPanelSkins"
				 title="Network Visualization" x="0" y="0">
			<s:VGroup horizontalCenter="0">
				<s:HGroup>
					<!--Canvas Size Controller, Move the cursor can change the size of components in the convas -->
					<s:Label text="Width:"/>
					<s:HSlider id="sliderW"
							   minimum="100"
							   maximum="{myPanel.width}"
							   value="300"
							   liveDragging="true" />
					<s:Label text="Height:"/>
					<s:HSlider id="sliderH"
							   minimum="100"
							   maximum="550"
							   value="200"
							   liveDragging="true" />
				</s:HGroup>
				
				
				<!--Main Display Area xmlns:view="view.*" -->
				<!--<s:Scroller width="600" height="550" horizontalScrollPolicy="auto" verticalScrollPolicy="auto"> -->
				<mx:Canvas id="bdr" width="{sliderW.value}" height="{sliderH.value}" borderVisible="false" depth="0">
					<mx:LineChart id="myTrafficChart" width="100%" height="100%" showDataTips="false" selectionMode="none" visible="true">
						<mx:dataProvider>
							<mx:XMLListCollection source="{mydata.children()}" />
						</mx:dataProvider>
						<mx:backgroundElements>
							<!--Define the line among plot items and between plot item and line item-->
							<mx:GridLines visible="false"/>
						</mx:backgroundElements>
						
						
						<!--parseFunction="parseDate" mx:SeriesSlide  id="exp" direction="down" elementOffset="150" dataUnits="seconds" dataInterval="0.1" parseFunction="parseDate" / -->
						
						<mx:horizontalAxis>
							<mx:DateTimeAxis id="DateAxis" dataUnits="seconds" displayLocalTime="true" dataInterval="1" parseFunction="parseDate"  />
						</mx:horizontalAxis>
						
						<mx:horizontalAxisRenderers>
							<local:ScrollableAxisRenderer id="hscrollAxisRenderer" axis="{DateAxis}" tickPlacement="none"  
														  placement="bottom" showLine="true" axisStroke="{scrollerStroke}" />
						</mx:horizontalAxisRenderers>
						
						<!--mx:horizontalAxisRenderers>
						<:AxisRenderer axis="{DateAxis}" showLabels="false" showLine="false" tickPlacement="none" minorTickPlacement="none">
						<mx:axisStroke>{DateAxisStroke}</mx:axisStroke>
						</mx:AxisRenderer>
						</mx:horizontalAxisRenderers -->
						
						<mx:verticalAxis>
							<mx:CategoryAxis id="TypeAxis" dataProvider="{xcategoryAC}" categoryField="type" />
						</mx:verticalAxis>
						
						<!--mx:verticalAxisRenderers>
						<local:ScrollableAxisRenderer id="vscrollAxisRenderer" axis="{TypeAxis}" tickPlacement="none"  
						labelGap="20"  maxVisibleColumns="8" placement="left" />
						</mx:verticalAxisRenderers -->
						
						<mx:verticalAxisRenderers>
							<local:ScrollableAxisRenderer id="vscrollAxisRenderer" axis="{TypeAxis}" showLabels="false" showLine="false"
														  tickPlacement="none" minorTickPlacement="none"/>
						</mx:verticalAxisRenderers>
						
						<!--itemRenderer="MyDataRenderer" -->
						<mx:series>
							<mx:PlotSeries id="pdata" xField="@date" yField="@type" itemRenderer="MyDataRenderer">
								<mx:dataProvider>
									<mx:XMLListCollection source="{mydata.children()}" />
								</mx:dataProvider>
								<!--mx:itemRenderer>
								<fx:Component >
								<s:Panel title="data" skinClass="MyPanelSkins" top="0" right="5">
								<s:layout>
								<s:VerticalLayout/>
								</s:layout>
								<mx:Text text="event" top="0"/>
								</s:Panel>
								</fx:Component>	
								</mx:itemRenderer-->
							</mx:PlotSeries>
							
							<mx:LineSeries id="ldata" focusRect="true" xField="@date" yField="@tl" width="1" height="1" itemRenderer="MyTimeLineRenderer" focusIn="ldata_focusInHandler(event)" focusOut="ldata_focusOutHandler(event)">
								<mx:lineStroke>
									<s:SolidColorStroke color="0x000000" weight="8" alpha="0.6" caps="square"/>
								</mx:lineStroke>
								<mx:dataProvider>
									<mx:XMLListCollection source="{mydata.children()}" />
								</mx:dataProvider>
							</mx:LineSeries>
							<mx:HLOCSeries id="vdata" xField="@date" openField="@type" closeField="@tl" lowField="@type" 
										   highField="@tl" > 
								<mx:dataProvider>
									<mx:XMLListCollection source="{mydata.children()}" />
								</mx:dataProvider>
								<mx:stroke>
									<s:SolidColorStroke weight="1" color="0xF0F8FF"/>
								</mx:stroke>
							</mx:HLOCSeries>
						</mx:series>
						
						<!--mx:Legend dataProvider="{mydata}" color = "0x323232" /-->
						
						
					</mx:LineChart>
				</mx:Canvas>
				<!--</s:Scroller> -->
				
			</s:VGroup>
		</s:Panel>
		
		<!--Detail Information of UserInput or URL  -->
		<s:Panel width="100%" height="50%"
				 skinClass="MyPanelSkins"
				 title="URL Location on Google Map" x="0" y="0">
			<maps:Map id="gmap" width="100%" height="100%" url="127.0.0.1" key="ABQIAAAAMSfKWynJzaOyrYA-3vN_ahQMXmws070rUph23y6VVuMampI-OBSH02ZbgEbN8CBmmpCnTZP4OyshCw" mapevent_mapready="onMapReady(event)" />
		</s:Panel>
		
	</s:VGroup>
		
	
	
</s:WindowedApplication>
