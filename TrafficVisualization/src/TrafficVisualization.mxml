<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:s1="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:View="View.*" xmlns:local="*" xmlns:maps="com.google.maps.*" 
					   creationComplete="init()" >
	
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<mx:SolidColorStroke id="DateAxisStroke" color="0x000000"
							 weight="8" alpha=".75" caps="none" />
		<!-- source="../xml/geoxml.xml" -->	
		<!--fx:XML id="mydata" source="../xml/2010-8-9.xml" /-->
		<mx:DateFormatter id="df" />
	
		<mx:SolidColorStroke id="scrollerStroke" weight="8" color="0x000000" alpha="0.6" caps="round" />
		<mx:SeriesSlide id="effSlide" direction="left" elementOffset="10" minimumElementDuration="100" duration="1000" />
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.google.maps.InfoWindowOptions;
			import com.google.maps.LatLng;
			import com.google.maps.LatLngBounds;
			import com.google.maps.Map;
			import com.google.maps.MapEvent;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.MapType;
			import com.google.maps.controls.MapTypeControl;
			import com.google.maps.controls.PositionControl;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.interfaces.IPane;
			import com.google.maps.overlays.Marker;
			import com.google.maps.services.*;
			
			import flash.events.Event;
			import flash.filesystem.File;
			import flash.geom.ColorTransform;
			
			import flashx.textLayout.events.DamageEvent;
			
			import mx.charts.CategoryAxis;
			import mx.charts.DateTimeAxis;
			import mx.charts.LineChart;
			import mx.charts.chartClasses.CartesianChart;
			import mx.charts.events.ChartItemEvent;
			import mx.charts.series.HLOCSeries;
			import mx.charts.series.LineSeries;
			import mx.charts.series.PlotSeries;
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.xml.SimpleXMLDecoder;
			import mx.utils.ArrayUtil;

		
			
			
			[Bindable]private var _clientIpAddr:String = "";
			[Bindable]private var _currentLat:String = "39.1915";
			[Bindable]private var _currentLng:String = "-77.3238";
			
			public var myTrafficChart:LineChart;
			public var pdata:PlotSeries;
			public var ldata:LineSeries;
			public var vdata:HLOCSeries;
			
			//Dynamically generate this in future 
			private var XML_PATH:String = "C:/Users/June/workspace/TrafficVisualization/src/xml/";
			[Bindable]public var mydata:XML;
			
			[Bindable]private var xcategoryAC:ArrayCollection = new ArrayCollection([{type:"MC"}, {type:"KB"},{type:"BASE"}, {type:"URL"}]);
			
			private var _markers:Array;
			
			
			//load data to xml object
			private function loadXML():void{
				//Get today's date and load the data of today's, if no todays file, just do nothing
				var today:Date = new Date();
				var now:String = String(today.fullYear) + "-" + String(today.month + 1) + "-" + String(today.day + 1)+ ".xml";
				var file_path:String = XML_PATH + now;
				trace(file_path);
				var file:File = new File(file_path);
				trace(file);
				
				if(file.exists) 
				{
					//load file to 
					
					mydata = new XML(file_path);
					//trace(mydata.toXMLString());
					//CreateChart
					myTrafficChart = new LineChart();
					myTrafficChart.height = 330;
					myTrafficChart.width = 770;
					myTrafficChart.dataProvider = mydata.elements("item");
					//trace(mydata.elements("item"));
					myTrafficChart.addEventListener(ChartItemEvent.ITEM_ROLL_OVER, myitemrolloverListener);
					
					//Create Horizontal Axis
					var dateAxis:DateTimeAxis = new DateTimeAxis();
					dateAxis.dataUnits = "seconds";
					dateAxis.displayLocalTime = true;
					dateAxis.dataInterval = 0.1;
					dateAxis.direction = "normal";
					dateAxis.parseFunction = parseDate;
					
					//Create Horizontal Axis Renderer
					var hscrollAxisRenderer:ScrollableAxisRenderer = new ScrollableAxisRenderer();
					hscrollAxisRenderer.axis = dateAxis;
					
					//Add Horizontal Axis
					myTrafficChart.horizontalAxis = dateAxis;
					myTrafficChart.horizontalAxisRenderer = hscrollAxisRenderer;
					
					//Create Vertical Axis
					var typeAxis:CategoryAxis = new CategoryAxis();
					typeAxis.dataProvider = xcategoryAC;
					typeAxis.categoryField = "@type";
					
					//Add Vertical Axis
					myTrafficChart.verticalAxis = typeAxis;
					
					
					
					//TODO: to put itemrenderer
					var Series:Array = new Array();
					
					pdata = new PlotSeries();
					pdata.xField = "@date";
					pdata.yField = "@type";
					pdata.dataProvider = mydata.item;
					Series.push(pdata);
				
					ldata = new LineSeries();
					ldata.xField = "@date";
					ldata.yField = "@tl";
					ldata.width = 1;
					ldata.height = 1; 
					ldata.dataProvider = mydata.item;
					Series.push(ldata);
					
					vdata = new HLOCSeries();
					vdata.xField = "@date";
					vdata.openField = "@type";
					vdata.closeField = "@tl";
					vdata.lowField = "@type";
					vdata.highField = "@tl";
					vdata.dataProvider = mydata.item;
					Series.push(vdata);
					
					
					myTrafficChart.series = Series;
				
					bdr.addElement(myTrafficChart);
					
					
				}else{
					Alert.show("No Current Day Events");
				}
				
			
			}
			
			
			private function moveGMapLocation(lat:Number, lng:Number):void
			{
				if(!gmap.isLoaded())
				{
					return;
				}
				
				var latLng:LatLng = new LatLng(lat, lng);
				gmap.setCenter(latLng);
			}	
					
			private function onMapReady(event:Event):void {
				
				//TODO: find a way to automatically know client location
				gmap.setCenter(new LatLng(Number(_currentLat
					), Number(_currentLng)), 13, MapType.NORMAL_MAP_TYPE);
				gmap.addControl(new ZoomControl());
				gmap.addControl(new PositionControl());
				gmap.addControl(new MapTypeControl());
				gmap.openInfoWindow(gmap.getCenter(), new InfoWindowOptions({title:"Geographic Information", content:"This is your current location"}));
				
				/* Add 5 markers to the map at random locations
				var bounds:LatLngBounds = map.getLatLngBounds();
				var southWest:LatLng = bounds.getSouthWest();
				var northEast:LatLng = bounds.getNorthEast();
				var lngSpan:Number = northEast.lng() - southWest.lng();
				var latSpan:Number = northEast.lat() - southWest.lat();
				for (var i:Number = 0; i < 5; i++) {
					var latlng:LatLng = new LatLng(southWest.lat() + latSpan * Math.random(),
						southWest.lng() + lngSpan * Math.random());
					map.addOverlay(createMarker(latlng, i + 1));
				}*/
			}
			
			private function addLocationMarker(title:String, content:String, lat:Number, lng:Number):void
			{
				var latLng:LatLng = new LatLng(lat, lng);
				var marker:Marker = new Marker(latLng);
				var titleFormat:TextFormat = new TextFormat();
				titleFormat.bold = true;
				titleFormat.color = 0x267BE3;
				titleFormat.size = 14;
				
				var infoArgs:Object = new Object();
				infoArgs.title = title;
				infoArgs.titleFormat = titleFormat;
				infoArgs.content = content;
				infoArgs.pointOffset = new Point(-20, -20);
				infoArgs.cornerRadius = 10;
				infoArgs.hasShadow = false;
				var info:InfoWindowOptions = new InfoWindowOptions(infoArgs);
				marker.addEventListener(MapMouseEvent.CLICK,
					function(e:MapMouseEvent):void
					{
						gmap.openInfoWindow(latLng, info);
					}
				);
				gmap.openInfoWindow(latLng, info);
				gmap.addOverlay(marker);
				
				
				
				//save all the markers has showed in the gmap
				_markers.push(marker);
			}
			
			private function clearMarkers():void
			{
				if(_markers.length > 0)
				{
					for each(var marker:Marker in _markers)
					{
						gmap.removeOverlay(marker);
					}
					gmap.closeInfoWindow();
				}
				
			}
		 		
			public function parseDate(s:String):Date{
				var newDate:Date = new Date(0);
			   //Get an array of Strings from the dash-seperated String
				var a:Array = s.split(" ");
				trace(s);
				var d:Array = a[0].split("-");
				var t:Array = a[1].split(":")
				var b:Array = a[1].split(".");
				//var t:Array = b[0].split(":");
				//Create the new Date Object, Subtract one from the month property
				//var newDate:Date = new Date(d[0], d[1]-1, d[2], t[0], t[1], t[2], b[1]);
				//var newDate:String = a[1].toString();
				//var newDate:Date = new Date(d[0], d[1]-1, d[2]);
				newDate.fullYear = Number(d[0]);
				newDate.month = Number(d[1]);
				//newDate.day = Number(d[2]);
				newDate.hours = Number(t[0]);
				newDate.minutes = Number(t[1]);
				newDate.seconds = Number(t[2]);
				//3 digits in millisecond
				var ms:String = b[1].toString().slice(0,2);
				newDate.milliseconds = Number(ms);
				return newDate;
			}
				
			protected function myitemrolloverListener(e:ChartItemEvent):void
			{
				
				var type:String = e.hitData.item.@type;
				var date:String = e.hitData.item.@date;
				var lat:Number;
				var lng:Number;
				var title:String = "";
				var content:String = "";
				//var geo:Object = new Object();
			
				
				if(type == 'URL')
				{		
					clearMarkers();
					lat = Number(e.hitData.item.@lat);
					lng = Number(e.hitData.item.@lng);
					title= type + ":" + e.hitData.item.@domain;
					//var postal:String = e.hitData.item.@postal;
					content = "Visited on " + e.hitData.item.@date + "\n" + "From:\n " + e.hitData.item.@city + "\n" + e.hitData.item.@region +", " + e.hitData.item.@country ;
					addLocationMarker(title,content,lat,lng);
					moveGMapLocation(lat, lng);
					
					/*
					var property:XMLList = e.hitData.item.elements();
					for each (var p:XML in property)
					{
						lat = Number(p.@lat);
						lng = Number(p.@lng);
						title= type + ":" + p.@domain;
						//var postal:String = e.hitData.item.@postal;
						content = "Visited on " + p.@date + "\n" + "From:\n " + p.@city + "\n" + p.@region +", " + p.@country ;
						addLocationMarker(title,content,lat,lng);
					}*/
					
				}
			}
					
			protected function dateChanged(date:Date):void
			{
				if (date == null)
					selection.text = "Date selected: ";                
				else
					selection.text = date.getFullYear().toString() + 
						'/' + (date.getMonth()+1).toString() + '/' + date.getDate();
			}
					
			protected function btnDone_clickHandler(event:MouseEvent):void
			{
				// TODO: 1. Find out whether the file is exist by date?
				//2. Show the certain file
				mydata.source = selection.text;
				//load xml to chart
				
			}
			
			protected function btnReal_clickHandler(event:MouseEvent):void
			{
				// TODO: 1. When "Realtime" button is clicked, change the lable into "Realtime on"
				//2. Get today's data and keep freshing every 10 seconds
				var str:String = btnReal.label;
				var s:Array = str.split(" ");
				if(s[3] == 'Off')
				{
					btnReal.label = "Real Time Monitor On";
					Alert.show("Update the data every 10 seconds")
					//reload the data of today's, add some listener
				}
				else{
					btnReal.label = "Real Time Monitor Off";
					Alert.show("You have turned off the data")
					//disable the update, remove somelistener
				
				}
				
				
			}
			
			public function init():void{
				
				loadXML();		
				//myTrafficChart.addEventListener(ChartItemEvent.ITEM_CLICK, myitemclickListener);
				//myTrafficChart.addEventListener(ChartItemEvent.ITEM_ROLL_OUT, myitemrolloutListener);	
			}

		]]>
	</fx:Script>
	
	<s1:states>
		<s:State name="normal" />
		<s:State name="hovered" />
	</s1:states>

	<s:layout>
		<s:VerticalLayout />
	</s:layout>		
		
		
		
	<s:Panel id="myPanel" width="100%" height="50%" skinClass="MyPanelSkins"
			 title="Network Visualization" x="0" y="0">
		<s:layout>
			<s:HorizontalLayout />
		</s:layout>
				
		<s:BorderContainer borderStyle="solid" height="100%" width="30%">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center" />
			</s:layout>
			<s:Button id="btnReal"  label="Real Time Monitor Off" height="30" click="btnReal_clickHandler(event)"/>
			<s:Label id="selection" color="0x323232" text="Date selected:" textAlign="center" />
			<mx:DateField id="dateField" yearNavigationEnabled="true" change="dateChanged(DateField(event.target).selectedDate)" color="0x000000" />
			<s:Button id="btnDone" label="Done" click="btnDone_clickHandler(event)" />
			
			<!--Canvas Size Controller, Move the cursor can change the size of components in the convas -->
			<s:Label text="Width:"/>
			<s:HSlider id="sliderW"  minimum="100" maximum="1100"  value="300" liveDragging="true" />
			<s:Label text="Height:"/>
			<s:HSlider id="sliderH" minimum="100" maximum="330" value="200" liveDragging="true" />
		</s:BorderContainer>
		
		<!--<s:Scroller width="600" height="550" horizontalScrollPolicy="auto" verticalScrollPolicy="auto"> -->
		<mx:Canvas id="bdr" width="{sliderW.value}" height="{sliderH.value}"  borderVisible="false" depth="0">
			<!--mx:LineChart id="myTrafficChart" width="100%" height="100%" showDataTips="false" selectionMode="none" visible="true"-->
				<!--mx:dataProvider>
					<mx:XMLListCollection source="{mydata.item}" />
				</mx:dataProvider -->
				<!--mx:backgroundElements-->
					<!--Define the line among plot items and between plot item and line item-->
					<!--mx:GridLines visible="false"/-->
				<!--/mx:backgroundElements-->
				
				
				<!--parseFunction="parseDate" mx:SeriesSlide  id="exp" direction="down" elementOffset="150" dataUnits="seconds" dataInterval="0.1" parseFunction="parseDate" / -->
				<!--mx:horizontalAxis>
					<mx:DateTimeAxis id="DateAxis" dataUnits="seconds" displayLocalTime="true" dataInterval="0.1" direction="normal" parseFunction="parseDate"  />
				</mx:horizontalAxis-->
				
				<!--mx:horizontalAxisRenderers>
					<local:ScrollableAxisRenderer id="hscrollAxisRenderer" axis="{DateAxis}" tickPlacement="none"  
												  placement="bottom" showLine="true" axisStroke="{scrollerStroke}" />
				</mx:horizontalAxisRenderers-->
				
				<!--mx:horizontalAxisRenderers>
				<:AxisRenderer axis="{DateAxis}" showLabels="false" showLine="false" tickPlacement="none" minorTickPlacement="none">
				<mx:axisStroke>{DateAxisStroke}</mx:axisStroke>
				</mx:AxisRenderer>
				</mx:horizontalAxisRenderers -->
				
				<!--mx:verticalAxis>
					<mx:CategoryAxis id="TypeAxis" dataProvider="{xcategoryAC}" categoryField="type" />
				</mx:verticalAxis-->
				
				<!--mx:verticalAxisRenderers>
				<local:ScrollableAxisRenderer id="vscrollAxisRenderer" axis="{TypeAxis}" tickPlacement="none"  
				labelGap="20"  maxVisibleColumns="8" placement="left" />
				</mx:verticalAxisRenderers -->
				
				<!--mx:verticalAxisRenderers>
					<local:ScrollableAxisRenderer id="vscrollAxisRenderer" axis="{TypeAxis}" showLabels="false" showLine="false"
												  tickPlacement="none" minorTickPlacement="none"/>
				</mx:verticalAxisRenderers-->
				
				<!--itemRenderer="MyDataRenderer" -->
				<!--mx:series>
					<mx:PlotSeries id="pdata" xField="@date" yField="@type" itemRenderer="MyDataRenderer" showEffect="{effSlide}" >
						<mx:dataProvider>
							<mx:XMLListCollection source="{mydata.item}" />
						</mx:dataProvider-->
						
					<!--/mx:PlotSeries-->
					
					<!--mx:LineSeries id="ldata" focusRect="true" xField="@date" yField="@tl" width="1" height="1" itemRenderer="MyTimeLineRenderer" >
						<mx:lineStroke>
							<s:SolidColorStroke color="0x000000" weight="8" alpha="0.6" caps="square"/>
						</mx:lineStroke>
						<mx:dataProvider>
							<mx:XMLListCollection source="{mydata.item}" />
						</mx:dataProvider>
					</mx:LineSeries-->
					<!--mx:HLOCSeries id="vdata" xField="@date" openField="@type" closeField="@tl" lowField="@type" 
								   highField="@tl" > 
						<mx:dataProvider>
							<mx:XMLListCollection source="{mydata.item}" />
						</mx:dataProvider>
						<mx:stroke>
							<s:SolidColorStroke weight="1" color="0xF0F8FF"/>
						</mx:stroke>
					</mx:HLOCSeries -->
				<!--/mx:series-->
			
			<!--/mx:LineChart-->
		</mx:Canvas>
		<!--</s:Scroller> -->
	</s:Panel>
	
	<!--Detail Information of UserInput or URL  -->
	<s:Panel width="100%" height="50%"
			 skinClass="MyPanelSkins"
			 title="URL Location on Google Map" x="0" y="0">
		<maps:Map id="gmap" width="100%" height="100%" url="127.0.0.1" key="ABQIAAAAMSfKWynJzaOyrYA-3vN_ahQMXmws070rUph23y6VVuMampI-OBSH02ZbgEbN8CBmmpCnTZP4OyshCw" mapevent_mapready="onMapReady(event)" />
	</s:Panel>	
		

		
	
	
</s:WindowedApplication>
