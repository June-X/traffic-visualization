<?xml version="1.0" encoding="utf-8"?>
<!--
@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s1:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				  xmlns:s1="library://ns.adobe.com/flex/spark"
				  xmlns:s="library://ns.adobe.com/flex/mx"
				  xmlns:mx="library://ns.adobe.com/flex/mx"
				   buttonMode="true" 
				creationComplete="{currentState = 'normal'}" 
				xmlns:d="MyDataRenderSkin">
	<!--mouseOver="{currentState= 'hovered'}"
	mouseOut="{currentState = 'normal'}" -->
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		//[HostComponent("spark.components.Button")]
		]]>
	</fx:Metadata>
	
		
	<fx:Style>
		@namespace s1 "library://ns.adobe.com/flex/spark";
		@namespace s "library://ns.adobe.com/flex/mx";
		@namespace d "MyDataRenderSkin";
		
		.URLStyle {
			skinClass: ClassReference("URLRendererSkin");
		}
		
		.MouseStyle {
			skinClass: ClassReference("MouseEventRendererSkin");
		}
		
		.KeyboardStyle {
			skinClass: ClassReference("KeyboardEventRendererSkin");
		}
	</fx:Style>


		


	<fx:Script>
		<![CDATA[
			import flashx.textLayout.tlf_internal;
			
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.states.State;
			[Bindable]
			public var myData:String;
			
			//public var _currentState:State;
			
			override public function set data(value:Object):void{
				super.data = value;
				//var d:XMLListCollection = new XMLListCollection(new XMLList(value));
				
				if(value == null)
					return;
				//set the label's value
				//dateDisplay.text = data.item.@date;
				if(data.item.@type == 'KB'){
					icon.source="../assets/Keyboard.png";
					//type.text = "Key Press";
					mRec.styleName="KeyboardStyle";
					dataDisplayN.text = data.item.@date + "\n" + data.item.@keys;
					var str1:String = "";
					var property1:XMLList = data.item.elements();
					for each (var p1:XML in property1)
					{
						str1 += String(p1.@date) +" " + String(p1.@keys) + "\n";
					}
					dataDisplayH.text = str1;
					//if(currentState == 'normal')
					//{
						
					//}
					//else{
						//if(currentState == 'hovered')
						//{
							
						//}
				    	
					//}
				}else{
					if(data.item.@type == 'MC'){
						icon.source="../assets/Mouse.png";
						dataDisplayN.text = data.item.@date + data.item.@domain;
						dataDisplayH.text = data.item.@date + data.item.@domain;
						//type.text = "Mouse Click";
						mRec.styleName="MouseStyle";
						//dataDisplay.hovered.text = data.item.@domain;
					}else{
						mRec.styleName="URLStyle";
						icon.source = "";
						dataDisplayN.text = data.item.@date + "\n" + data.item.@domain;
						var str2:String = "";
						var property2:XMLList = data.item.elements();
						for each (var p2:XML in property2)
						{
							str2 += String(p2.@date) +" " + String(p2.@domain) + "\n";
						}
						dataDisplayH.text = str2;
						/*
						if(currentState == 'normal')
						{
							
						}
						else{
							if(currentState == 'hovered')
							{
								
							}
						}*/
						//rf1.color="0xFFFFFF";
						//rf2.color="0xe9e9e9";
					}
				}
			}

			
		]]>
	</fx:Script>
	
	<s1:postLayoutTransformOffsets>
		<mx:TransformOffsets id="offsets" x.hovered="-40" y.hovered="-40" scaleX.hovered="5" scaleY.hovered="4" />
	</s1:postLayoutTransformOffsets>
	
	<s1:transitions>
		<s1:Transition fromState="normal" toState="hovered" autoReverse="true" >
			<s1:Animate target="{offsets}" duration="500">
				<s1:SimpleMotionPath property="scaleX" />
				<s1:SimpleMotionPath property="scaleY" />
				<s1:SimpleMotionPath property="x" />
				<s1:SimpleMotionPath property="y" />
			</s1:Animate> 
		</s1:Transition>
		<s1:Transition fromState="hovered" toState="normal" autoReverse="true">
			<s1:Animate target="{offsets}" duration="500">
				<s1:SimpleMotionPath property="scaleX" />
				<s1:SimpleMotionPath property="scaleY" />
				<s1:SimpleMotionPath property="x" />
				<s1:SimpleMotionPath property="y" />
			</s1:Animate> 			
		</s1:Transition>
	</s1:transitions>
	
	<s1:states>
		<s:State name="normal" />
		<s:State name="hovered" />
	</s1:states>
	

	
	<s1:SkinnableContainer id="mRec"  depth.normal="0" visible="true" width="100" height="80" horizontalCenter="0" verticalCenter="0" depth.hovered="1" >	
		
		<s1:layout>
			<s1:VerticalLayout/>
		</s1:layout>
		<s:Image id="icon" scaleX="0.05" scaleY="0.05" horizontalAlign="center" />
		<s1:RichText id="dataDisplayN" color="0xFFFFFF" maxWidth.normal="{mRec.width}" height.hovered="0"  textAlign="left" visible.hovered="false" fontWeight.normal="bold" fontSize.normal="12" fontSize.hovered="1"  />
		<s1:RichText id="dataDisplayH" color="0xFFFFFF" maxWidth.hovered="{mRec.width}" maxHeight.hovered="{mRec.height}" textAlign="left" visible.normal="false" visible.hovered="true"  fontSize.hovered="8" />
		<!--s1:VGroup top="0" left="0" right="0" bottom="0" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
			<s1:HGroup id="hlg" width="100%"  visible.hovered="false">
				
				<s1:Label id="type" width="60%" fontWeight="bold" />				
			</s1:HGroup> 
			
			<s1:VGroup visible.hovered="false" width="100%">
				
			</s1:VGroup>	
		</s1:VGroup>
		<s1:VScrollBar viewport="{expandedDisplay}" 
					   top="10" 
					   left="{expandedDisplay.x + expandedDisplay.width + 10}" 
					   height="{expandedDisplay.height}" /-->
		
	</s1:SkinnableContainer>
	
	

	
</s1:ItemRenderer>